import serial
import time
from influxdb_client import InfluxDBClient, Point, WritePrecision

# ==== CONFIGURE THESE PARAMETERS ==== 
# Update URL to point to InfluxDB Cloud
INFLUXDB_URL = "https://us-east-1-1.aws.cloud2.influxdata.com/orgs/ce3ed40405c70a4b/data-explorer?fluxScriptEditor"  # Change to your InfluxDB Cloud endpoint
INFLUXDB_TOKEN = "IA3Hj33NS_q35IRgH7rm6nL6fmfwlE0Xhx9_dAnmZGSSiFmEZkcbotyk6mIxfHx_0sYV-OXSqqmRCwEcC1-HUw=="  # Your InfluxDB Cloud token
INFLUXDB_ORG = "P2"  # Your InfluxDB Cloud organization name
INFLUXDB_BUCKET = "WFDS"  # The bucket where data will be stored

SERIAL_PORT = "COM3"  # Update for your system
BAUD_RATE = 115200

# Initialize InfluxDB client and write API
client = InfluxDBClient(url=INFLUXDB_URL, token=INFLUXDB_TOKEN, org=INFLUXDB_ORG)
write_api = client.write_api()

# ==== CONNECT TO ARDUINO ==== 
try:
    ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
    time.sleep(2)  # Allow Arduino to initialize
    print("Connected to Arduino on", SERIAL_PORT)
except Exception as e:
    print("Error connecting to Arduino:", e)
    exit()

# ==== READ DATA FROM ARDUINO AND WRITE TO INFLUXDB ==== 
while True:
    try:
        line = ser.readline().decode("utf-8").strip()  # Read data from Arduino
        if line:
            print("Received:", line)  # Debugging line

            data = line.split(",")  # Split CSV data
            if len(data) == 4:  # Check if there are 4 fields (temperature, moisture, wind_speed, condition_count)
                temp = float(data[0])
                moisture = int(data[1])
                wind_speed = float(data[2])
                condition_count = int(data[3])

                # Create InfluxDB data point WITH TIME
                point = (
                    Point("sensor_data")
                    .field("temperature", temp)
                    .field("moisture", moisture)
                    .field("wind_speed", wind_speed)
                    .field("condition_count", condition_count)
                    .time(time.time_ns(), WritePrecision.NS)  # Adds a timestamp in nanoseconds
                )

                # Write the data point to InfluxDB Cloud
                write_api.write(bucket=INFLUXDB_BUCKET, org=INFLUXDB_ORG, record=point)
                print("Data sent to InfluxDB")

    except Exception as e:
        print("Error:", e)

    time.sleep(1)  # Adjust the delay if necessary
